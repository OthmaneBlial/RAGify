# Code Examples

## Python Examples

### Authenticating and Creating a User
```python
import requests

# Set your API key
api_key = 'your_api_key_here'
headers = {
    'Authorization': f'Bearer {api_key}',
    'Content-Type': 'application/json'
}

# Create a user
user_data = {
    'name': 'Alice Smith',
    'email': 'alice@example.com',
    'password': 'securepassword123'
}

response = requests.post('https://api.example.com/users', json=user_data, headers=headers)

if response.status_code == 201:
    user = response.json()
    print(f"Created user: {user['name']} with ID: {user['id']}")
else:
    print(f"Error: {response.status_code} - {response.text}")
```

### Python Example for create_widget Function
```python
import requests

def create_widget(api_key, name, description, color):
    """
    Create a new widget using the API.

    Args:
        api_key (str): Your API key
        name (str): Name of the widget
        description (str): Description of the widget
        color (str): Color of the widget

    Returns:
        dict: The created widget data
    """
    url = 'https://api.example.com/widgets'
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    data = {
        'name': name,
        'description': description,
        'color': color
    }

    response = requests.post(url, json=data, headers=headers)
    response.raise_for_status()  # Raise an exception for bad status codes

    return response.json()

# Usage example
api_key = 'your_api_key_here'
widget = create_widget(
    api_key=api_key,
    name='Dashboard Widget',
    description='A widget for displaying dashboard metrics',
    color='green'
)
print(f"Created widget: {widget['name']} (ID: {widget['id']})")
```

### Listing Users with Pagination
```python
import requests

def get_users(api_key, limit=10, offset=0):
    url = 'https://api.example.com/users'
    headers = {'Authorization': f'Bearer {api_key}'}
    params = {'limit': limit, 'offset': offset}

    response = requests.get(url, headers=headers, params=params)
    response.raise_for_status()

    return response.json()

# Get first 10 users
api_key = 'your_api_key_here'
result = get_users(api_key)
print(f"Total users: {result['total']}")
for user in result['users']:
    print(f"- {user['name']} ({user['email']})")
```

## JavaScript Examples

### Creating a Widget with Fetch API
```javascript
async function createWidget(apiKey, widgetData) {
  const response = await fetch('https://api.example.com/widgets', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(widgetData)
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return await response.json();
}

// Usage
const apiKey = 'your_api_key_here';
const widgetData = {
  name: 'Analytics Widget',
  description: 'Displays user analytics',
  color: 'purple'
};

createWidget(apiKey, widgetData)
  .then(widget => console.log(`Created widget: ${widget.name}`))
  .catch(error => console.error('Error creating widget:', error));
```

### Authenticating to /users Endpoint
```javascript
// Function to authenticate and fetch users
async function authenticateAndFetchUsers(apiKey) {
  try {
    const response = await fetch('https://api.example.com/users', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`
      }
    });

    if (response.status === 401) {
      throw new Error('Unauthorized: Invalid API key');
    }

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.users;
  } catch (error) {
    console.error('Error fetching users:', error);
    throw error;
  }
}

// Usage
const apiKey = 'your_api_key_here';
authenticateAndFetchUsers(apiKey)
  .then(users => {
    users.forEach(user => console.log(`${user.name}: ${user.email}`));
  })
  .catch(error => console.error(error));
```

## Error Handling Examples

### Handling Rate Limits
```python
import time
import requests
from requests.exceptions import HTTPError

def make_api_request(url, headers, max_retries=3):
    for attempt in range(max_retries):
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            return response.json()
        except HTTPError as e:
            if response.status_code == 429:  # Rate limited
                retry_after = int(response.headers.get('Retry-After', 60))
                print(f"Rate limited. Retrying after {retry_after} seconds...")
                time.sleep(retry_after)
                continue
            else:
                raise e
    raise Exception("Max retries exceeded")
```

## Best Practices
- Always handle authentication errors gracefully
- Implement proper error handling and logging
- Respect rate limits and implement backoff strategies
- Validate input data before making API calls
- Use HTTPS for all API communications